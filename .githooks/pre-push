#!/bin/bash

echo "üöÄ Running pre-push checks..."

# Check if we're inside a Docker environment
if [ -f /.dockerenv ]; then
    DOCKER_PREFIX=""
else
    DOCKER_PREFIX="docker-compose exec app"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

ERRORS=0

# Run full test suite
echo "üß™ Running full test suite..."
$DOCKER_PREFIX php artisan test --coverage --min=80
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Test suite failed or coverage below 80%.${NC}"
    ERRORS=1
fi

# Static analysis
echo "üî¨ Running comprehensive static analysis..."
$DOCKER_PREFIX ./vendor/bin/phpstan analyse --level=max --no-progress
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå PHPStan found issues at maximum level.${NC}"
    ERRORS=1
fi

# Check for TODO/FIXME comments in committed code
echo "üìù Checking for TODO/FIXME comments..."
TODO_COUNT=$(git log --oneline -n 10 --pretty=format:"%s" | grep -i -c "TODO\|FIXME\|XXX\|HACK")
if [ $TODO_COUNT -gt 5 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found many TODO/FIXME comments in recent commits. Consider cleaning up.${NC}"
fi

# Check for large files
echo "üì¶ Checking for large files..."
LARGE_FILES=$(find . -name "*.php" -size +100k -not -path "./vendor/*")
if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Large PHP files found (>100KB):${NC}"
    echo "$LARGE_FILES"
    echo "Consider refactoring these files."
fi

# Security audit
echo "üîí Running comprehensive security audit..."
$DOCKER_PREFIX composer audit --format=json > /tmp/audit.json 2>/dev/null
if [ $? -eq 1 ]; then
    HIGH_VULNS=$(cat /tmp/audit.json | jq '.advisories | map(select(.severity == "high")) | length' 2>/dev/null || echo "0")
    if [ "$HIGH_VULNS" -gt 0 ]; then
        echo -e "${RED}‚ùå High severity security vulnerabilities found!${NC}"
        ERRORS=1
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Security vulnerabilities found. Please review and update dependencies.${NC}"
    fi
fi

# Check for .env files that might accidentally be committed
ENV_FILES=$(git ls-files | grep -E "\.env$|\.env\.")
if [ -n "$ENV_FILES" ]; then
    echo -e "${RED}‚ùå Environment files found in repository:${NC}"
    echo "$ENV_FILES"
    echo "Make sure no sensitive data is being committed."
    ERRORS=1
fi

# Final result
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All pre-push checks passed! Safe to push.${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Pre-push checks failed. Please fix the issues above before pushing.${NC}"
    echo "You can skip these checks with 'git push --no-verify' (strongly not recommended)"
    exit 1
fi