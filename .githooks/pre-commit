#!/bin/bash

echo "üîç Running pre-commit checks..."

# Check if we're inside a Docker environment
if [ -f /.dockerenv ]; then
    DOCKER_PREFIX=""
else
    DOCKER_PREFIX="docker-compose exec app"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

ERRORS=0

# Get list of PHP files to check
PHP_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep '\.php$')

if [ -n "$PHP_FILES" ]; then
    echo -e "${YELLOW}Checking PHP files...${NC}"
    
    # PHP Syntax Check
    echo "üîß Checking PHP syntax..."
    for file in $PHP_FILES; do
        if [ -f "$file" ]; then
            $DOCKER_PREFIX php -l "$file" >/dev/null 2>&1
            if [ $? -ne 0 ]; then
                echo -e "${RED}‚ùå PHP syntax error in: $file${NC}"
                ERRORS=1
            fi
        fi
    done
    
    # Laravel Pint (Code Formatting)
    echo "üé® Running Laravel Pint..."
    $DOCKER_PREFIX ./vendor/bin/pint --test
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Code formatting issues found. Run 'make format' to fix.${NC}"
        ERRORS=1
    fi
    
    # PHPStan (Static Analysis)
    echo "üî¨ Running PHPStan..."
    $DOCKER_PREFIX ./vendor/bin/phpstan analyse --no-progress
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå PHPStan found issues.${NC}"
        ERRORS=1
    fi
    
    # PHP CodeSniffer
    echo "üìè Running PHPCS..."
    $DOCKER_PREFIX ./vendor/bin/phpcs --standard=phpcs.xml
    if [ $? -ne 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  PHPCS found issues. Run 'make fix-cs' to fix automatically.${NC}"
        # Don't fail on PHPCS issues, just warn
    fi
fi

# Get list of JS/TS/Vue files to check
JS_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(js|ts|vue)$')

if [ -n "$JS_FILES" ]; then
    echo -e "${YELLOW}Checking JavaScript/Vue files...${NC}"
    
    # Check if we have Node modules
    if [ -d "node_modules" ] || [ -f ".dockerenv" ]; then
        # ESLint (if available)
        if [ -f "node_modules/.bin/eslint" ] || command -v eslint >/dev/null 2>&1; then
            echo "üîç Running ESLint..."
            npx eslint $JS_FILES
            if [ $? -ne 0 ]; then
                echo -e "${RED}‚ùå ESLint found issues.${NC}"
                ERRORS=1
            fi
        fi
    fi
fi

# Run a quick test suite
echo "üß™ Running quick tests..."
$DOCKER_PREFIX php artisan test --parallel --stop-on-failure
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Tests failed. Please fix before committing.${NC}"
    ERRORS=1
fi

# Security check (if composer audit is available)
echo "üîí Running security audit..."
$DOCKER_PREFIX composer audit --format=plain --no-dev 2>/dev/null
if [ $? -eq 1 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Security vulnerabilities found. Please review.${NC}"
    # Don't fail on security issues, just warn
fi

# Final result
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Pre-commit checks failed. Please fix the issues above.${NC}"
    echo "You can skip these checks with 'git commit --no-verify' (not recommended)"
    exit 1
fi